@use "sass:color";

/* Colors */
/* Generated with: https://uicolors.app/generate/1536e6 */
$blue: (
  "50": #f3f6fb,
  "100": #e3ecf6,
  "200": #cedfef,
  "300": #acc9e4,
  "400": #85add5,
  "500": #6791c9,
  "600": #547abc,
  "700": #4a68ab,
  "800": #41568c,
  "900": #384970,
  "950": #262f45,
);

$black: (
  "25": #656667,
  "50": #505253,
  "100": #484a4b,
  "200": #3e4041,
  "300": #3e4041,
  "400": #343637,
  "500": #27292a,
  "600": #1f2122,
  "700": #161819,
  "800": #121415,
  "900": #0c0e0f,
  "950": #060809,
);

$white: (
  "500": #edeff0,
);

/* $grey: ( */
/*   "50": #e9eaea, */
/*   "100": #c3c3c3, */
/*   "200": #9c9d9d, */
/*   "300": #757677, */
/*   "400": #4e5050, */
/*   "500": #27292a, */
/*   "600": #202222, */
/*   "700": #191a1b, */
/*   "800": #121313, */
/*   "900": #0b0b0c, */
/*   "950": #040404, */
/* ); */

$colors: (
  "blue": $blue,
  "black": $black,
  "white": $white,
);

$properties: (
  "bg": "background-color",
  "text": "color",
  "border": "border",
);

.bg-transparent {
  background-color: transparent;
}

@mixin create-color-styles($name, $variant, $color) {
  .bg-#{$name}-#{$variant} {
    /* background-color: unset; */
    background-color: $color;
  }

  .text-#{$name}-#{$variant} {
    /* color: unset; */
    color: $color;
  }

  .hover\: {
    &bg-#{$name}-#{$variant} {
      &:hover {
        background-color: $color;
      }
    }
  }

  /* TODO: add .lighten & .darken hover classes (add either class to lighten or darken on hover) */
}

@each $name, $color-map in $colors {
  @each $variant, $color in $color-map {
    /* $bg-#{$name}-#{$variant}: $color; */
    @include create-color-styles($name, $variant, $color);

    @for $i from 1 through 20 {
      $op-value: $i * 5 * 0.01;
      $op-variant: $i * 5;

      @include create-color-styles($name,
        #{$variant}\/#{$op-variant},
        color.adjust($color, $alpha: -1 + $op-value));
    }
  }
}

/* Spacing */

@for $i from 0 through 32 {

  /* Margin */
  .m-#{$i} {
    margin: $i * 4px;
  }

  .mt-#{$i} {
    margin-top: $i * 4px;
  }

  .mr-#{$i} {
    margin-right: $i * 4px;
  }

  .mb-#{$i} {
    margin-bottom: $i * 4px;
  }

  .ml-#{$i} {
    margin-left: $i * 4px;
  }

  .mx-#{$i} {
    margin-left: $i * 4px;
    margin-right: $i * 4px;
  }

  .my-#{$i} {
    margin-top: $i * 4px;
    margin-bottom: $i * 4px;
  }

  /* Padding */
  .p-#{$i} {
    padding: $i * 4px;
  }

  .pt-#{$i} {
    padding-top: $i * 4px;
  }

  .pr-#{$i} {
    padding-right: $i * 4px;
  }

  .pb-#{$i} {
    padding-bottom: $i * 4px;
  }

  .pl-#{$i} {
    padding-left: $i * 4px;
  }

  .px-#{$i} {
    padding-left: $i * 4px;
    padding-right: $i * 4px;
  }

  .py-#{$i} {
    padding-top: $i * 4px;
    padding-bottom: $i * 4px;
  }
}

/* Border radius */

$radius: (
  // 2px
  "xs": 0.125rem,
  // 4px
  "sm": 0.25rem,
  // 6px
  "md": 0.375rem,
  // 8px
  "lg": 0.5rem,
  // 12px
  "xl": 0.75rem,
  // 16px
  "2xl": 1rem,
  // 24px
  "3xl": 1.5rem,
  // 32px
  "4xl": 2rem,
  "none": 0,
  "full": 100%
);

@each $variant, $value in $radius {
  .rounded-#{$variant} {
    border-radius: $value;
  }
}

.transition {
  transition-property: color, background-color, border-color,
    text-decoration-color, fill, stroke, opacity, box-shadow, transform,
    translate, scale, rotate, filter, backdrop-filter;
  /* transition-timing-function: var(--default-transition-timing-function); */
  /* transition-duration: var(--default-transition-duration); */
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 250ms;
}

@for $i from 1 through 20 {
  $duration: $i * 50;

  .duration-#{$duration} {
    transition-duration: #{$duration}ms;
  }
}

/* Font size & weight */

$font-sizes: (
  // 10px
  "2xs": 0.625rem,
  // 12px
  "xs": 0.75rem,
  // 14px
  "sm": 0.875rem,
  // 16px
  "base": 1rem,
  // 18px
  "lg": 1.125rem,
  // 20px
  "xl": 1.25rem,
  // 24px
  "2xl": 1.5rem,
  // 30px
  "3xl": 1.875rem,
  // 36px
  "4xl": 2.25rem,
  // 48px
  "5xl": 3rem,
  // 60px
  "6xl": 3.75rem,
  // 72px
  "7xl": 4.5rem,
  // 96px
  "8xl": 6rem,
  // 128px
  "9xl": 8rem
);

@each $variant, $value in $font-sizes {
  .text-#{$variant} {
    font-size: $value;
  }
}

$font-weights: (
  "thin": 100,
  "extralight": 200,
  "light": 300,
  "normal": 400,
  "medium": 500,
  "semibold": 600,
  "bold": 700,
  "extrabold": 800,
  "black": 900,
);

@each $variant, $value in $font-weights {
  .font-#{$variant} {
    font-weight: $value;
  }
}

/* GTK icon sizes */
@each $variant, $value in $font-sizes {
  .icon-#{$variant} {
    -gtk-icon-size: $value;
  }
}
