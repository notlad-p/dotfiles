import { App, Astal, Gtk, Gdk } from "astal/gtk3";
import { Variable, bind } from "astal";
import Hyprland from "gi://AstalHyprland";
import Tray from "gi://AstalTray";
// import { interval } from "astal/time";
// import AstalIO from "gi://AstalIO";
import {
  isStarted,
  secondsEllapsed,
  formatTimerString,
  toggle,
} from "./stopwatch";

function Stopwatch() {
  // let isStarted = Variable(false);
  // start seconds count at -1 because `interval` callback will run immediately
  // let secondsEllapsed = Variable(-1);
  // let timer: AstalIO.Time | null = null;
  //
  // const formatTimerString = (seconds: number) => {
  //   const hh = Math.floor(seconds / (60 * 60))
  //     .toString()
  //     .padStart(2, "0");
  //   const mm = Math.floor((seconds / 60) % 60)
  //     .toString()
  //     .padStart(2, "0");
  //   const ss = (seconds % 60).toString().padStart(2, "0");
  //
  //   return `${hh}:${mm}:${ss}`;
  // };

  return (
    <box className="Stopwatch">
      <button
        className="toggle"
        vexpand={false}
        hexpand={false}
        valign={Gtk.Align.CENTER}
        onClicked={toggle}
      >
        <label
          label={bind(isStarted).as((started) => (started ? "Stop" : "Start"))}
        />
      </button>

      <label
        className="stopwatch-time"
        label={bind(secondsEllapsed).as((sec) =>
          sec > 0 ? formatTimerString(sec) : "00:00:00",
        )}
      />

      <button
        onClicked={() => {
          // reset secondsEllapsed to -1
          secondsEllapsed.set(-1);
        }}
      >
        <label label="Reset" />
      </button>
    </box>
  );
}

// use workaround to get monitor name
// taken from: https://github.com/Aylur/ags/issues/363#issuecomment-2140092162
// if using GTK4, use `monitor.get_connector()`
const display = Gdk.Display.get_default();
function getMonitorName(gdkmonitor: Gdk.Monitor) {
  const screen = display.get_default_screen();

  for (let i = 0; i < display.get_n_monitors(); ++i) {
    if (gdkmonitor === display.get_monitor(i))
      return screen.get_monitor_plug_name(i);
  }
}

type WorkspacesProps = {
  monitor: Gdk.Monitor;
};

function Workspaces({ monitor }: WorkspacesProps) {
  const hypr = Hyprland.get_default();

  const monitorName = getMonitorName(monitor);

  return (
    <box className="Workspaces">
      {bind(hypr, "workspaces").as((wss) =>
        wss
          .filter((ws) => !(ws.id >= -99 && ws.id <= -2)) // filter out special workspaces
          .filter((ws) => ws.get_monitor().name === monitorName) // only show workspaces on current monitor
          .sort((a, b) => a.id - b.id)
          .map((ws) => {
            return (
              <button
                className={bind(hypr, "focusedWorkspace").as((fw) => {
                  let classNames = "";

                  const isActiveWorkspace =
                    ws.monitor.activeWorkspace.id === ws.id;
                  const isFocusedWorkspace = ws === fw;

                  // focused comes first to take priority
                  if (isFocusedWorkspace) {
                    return "focused";
                  }

                  if (isActiveWorkspace) {
                    return "active";
                  }

                  // return ws === fw ? "focused" : "";
                  return "";
                })}
                onClicked={() => ws.focus()}
              >
                {ws.id}
              </button>
            );
          }),
      )}
    </box>
  );
}

function SysTray() {
  const tray = Tray.get_default();

  return (
    <box className="SysTray">
      {bind(tray, "items").as((items) =>
        items.map((item) => (
          <menubutton
            tooltipMarkup={bind(item, "tooltipMarkup")}
            usePopover={false}
            actionGroup={bind(item, "actionGroup").as((ag) => ["dbusmenu", ag])}
            menuModel={bind(item, "menuModel")}
          >
            <icon gicon={bind(item, "gicon")} />
          </menubutton>
        )),
      )}
    </box>
  );
}

function DateTime({ format = "%H:%M - %A %e." }) {
  const time = Variable("").poll(1000, `date "+${format}"`);

  return <label className="Time" label={time()} />;
}

export default function Bar(gdkmonitor: Gdk.Monitor) {
  const { TOP, LEFT, RIGHT, BOTTOM } = Astal.WindowAnchor;

  // console.log(gdkmonitor.get_model())

  return (
    <window
      className="Bar"
      gdkmonitor={gdkmonitor}
      exclusivity={Astal.Exclusivity.EXCLUSIVE}
      anchor={TOP | LEFT | RIGHT}
      application={App}
    >
      <centerbox>
        <box hexpand halign={Gtk.Align.START}>
          {/* <Workspaces monitorId={gdkmonitor.} /> */}
          <Workspaces monitor={gdkmonitor} />
          <SysTray />
        </box>
        <box />
        {/* <button onClicked="echo hello" halign={Gtk.Align.CENTER}> */}
        {/*   Welcome to AGS! */}
        {/* </button> */}
        {/* <button onClicked={() => print("hello")} halign={Gtk.Align.CENTER}> */}
        {/*   <label label={time()} /> */}
        {/* </button> */}
        <box hexpand halign={Gtk.Align.END}>
          <Stopwatch />
          <DateTime format="%A, %b %d" />
          <DateTime format="%_I:%M %P" />
        </box>
      </centerbox>
    </window>
  );
}
